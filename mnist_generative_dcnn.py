{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [markdown]\n# # 20180008 - 20180256\n# # Autoencoder\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T20:36:27.829579Z\",\"iopub.execute_input\":\"2021-11-21T20:36:27.83018Z\",\"iopub.status.idle\":\"2021-11-21T20:36:34.994945Z\",\"shell.execute_reply.started\":\"2021-11-21T20:36:27.830086Z\",\"shell.execute_reply\":\"2021-11-21T20:36:34.994213Z\"}}\nimport keras\nfrom keras import layers\n\nembed_filter_c = 4\n\ninput_img = keras.Input(shape=(28, 28, 1))\n\nx = layers.Conv2D(100, (3, 3), activation=layers.LeakyReLU(), padding='same')(input_img)\nx = layers.MaxPooling2D((2, 2), padding='same')(x) #(28,28 to 14,14)\n\nx = layers.Conv2D(20, (3, 3), activation=layers.LeakyReLU(), padding='same')(x)\nx = layers.MaxPooling2D((2, 2), padding='same')(x)\n\nencoded = layers.Conv2D(embed_filter_c, (3, 3), activation=layers.LeakyReLU(),padding='same')(x)\n\nx = layers.UpSampling2D((2, 2))(encoded)\nx = layers.Conv2D(20, (3, 3), activation=layers.LeakyReLU(),padding='same')(x)\n\nx = layers.UpSampling2D((2, 2))(x)\nx = layers.Conv2D(100, (3, 3), activation=layers.LeakyReLU(),padding='same')(x)\n\ndecoded = layers.Conv2D(1, (2, 2), activation=layers.LeakyReLU(), padding='same')(x)\nprint(\"Model Structure\\n------------------------------------\")\nautoencoder = keras.Model(input_img, decoded)\nautoencoder.compile(optimizer='adam', loss='mse')\nautoencoder.summary()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T20:36:34.997555Z\",\"iopub.execute_input\":\"2021-11-21T20:36:34.997797Z\",\"iopub.status.idle\":\"2021-11-21T20:39:27.489989Z\",\"shell.execute_reply.started\":\"2021-11-21T20:36:34.997768Z\",\"shell.execute_reply\":\"2021-11-21T20:39:27.489274Z\"}}\nfrom keras.datasets import mnist\nimport numpy as np\n\n(x_train, _), (x_test, _) = mnist.load_data()\n\nx_train = x_train.astype('float32') / 255.\nx_test = x_test.astype('float32') / 255.\nx_train = np.reshape(x_train, (len(x_train), 28, 28, 1))\nx_test = np.reshape(x_test, (len(x_test), 28, 28, 1))\n\nautoencoder.fit(x_train, x_train,\n                epochs=30, #5, #50,\n                batch_size=128,\n                shuffle=True,\n                validation_data=(x_test, x_test))\n#                 ,verbose =0)\n                #callbacks=[TensorBoard(log_dir='/tmp/autoencoder')])\n\n# %% [markdown]\n# # Encoder\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T20:39:27.49119Z\",\"iopub.execute_input\":\"2021-11-21T20:39:27.491529Z\",\"iopub.status.idle\":\"2021-11-21T20:39:28.264806Z\",\"shell.execute_reply.started\":\"2021-11-21T20:39:27.491492Z\",\"shell.execute_reply\":\"2021-11-21T20:39:28.264037Z\"}}\nencoder = keras.Model(input_img, encoded)\n\nencoded_imgs = encoder.predict(x_test)\n\nprint(\"Encoder Structure\\n------------------------------------\")\nencoder.summary()\n\n# %% [markdown]\n# # Decoder\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T20:39:28.266894Z\",\"iopub.execute_input\":\"2021-11-21T20:39:28.267406Z\",\"iopub.status.idle\":\"2021-11-21T20:39:28.753436Z\",\"shell.execute_reply.started\":\"2021-11-21T20:39:28.267349Z\",\"shell.execute_reply\":\"2021-11-21T20:39:28.752666Z\"}}\ndecoder_input = keras.Input(shape=(7,7,embed_filter_c))\nn5 = autoencoder.layers[-5](decoder_input)\nn4 = autoencoder.layers[-4](n5)\nn3 = autoencoder.layers[-3](n4)\nn2 = autoencoder.layers[-2](n3)\nn1 = autoencoder.layers[-1](n2)\ndecoder = keras.Model(decoder_input,n1)\n\ndecoded_imgs = decoder.predict(encoded_imgs)\nprint(\"Decoder Structure\\n------------------------------------\")\ndecoder.summary()\n\n# %% [markdown]\n# # Visualization\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T20:39:28.754529Z\",\"iopub.execute_input\":\"2021-11-21T20:39:28.755277Z\",\"iopub.status.idle\":\"2021-11-21T20:39:28.761986Z\",\"shell.execute_reply.started\":\"2021-11-21T20:39:28.755238Z\",\"shell.execute_reply\":\"2021-11-21T20:39:28.761264Z\"}}\nfrom random import seed\nfrom random import random\n# seed random number generator\nseed(3245)\nK = 10\nr = int(random()*(10000-K))\nr\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2021-11-21T20:40:12.215973Z\",\"iopub.execute_input\":\"2021-11-21T20:40:12.216237Z\",\"iopub.status.idle\":\"2021-11-21T20:40:16.13886Z\",\"shell.execute_reply.started\":\"2021-11-21T20:40:12.216207Z\",\"shell.execute_reply\":\"2021-11-21T20:40:16.138032Z\"}}\nimport matplotlib.pyplot as plt\n\n\nplt.figure(figsize=(K*5, 10))\nfor i in range(r, K + r):\n    # Display original\n    ax = plt.subplot(2, K, i-r+1)\n    plt.imshow(x_test[i].reshape(28, 28))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n\n    # Display reconstruction\n    ax = plt.subplot(2, K, i - r+1  + K)\n    plt.imshow(decoded_imgs[i].reshape(28, 28))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()\nprint(\"Encodings 7*7*\"+str(embed_filter_c))\nfig, ax = plt.subplots(embed_filter_c,K,figsize=(5*K,embed_filter_c*5))\nfor k in range(embed_filter_c):\n    for i in range(1, K + 1):\n        ax[k,i-1].imshow(encoded_imgs[i+r-1,:,:,k])\n        plt.gray()\n        ax[k,i-1].get_xaxis().set_visible(False)\n        ax[k,i-1].get_yaxis().set_visible(False)\nplt.show()","metadata":{"_uuid":"62cc707a-b00a-49a9-ac16-fee64ec4d340","_cell_guid":"3261d241-abbe-401a-94ee-bbb8bd7b788d","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}